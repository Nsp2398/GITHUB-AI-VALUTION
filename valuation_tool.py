# -*- coding: utf-8 -*-
"""Valuation_tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egsANUcKvQkqOyGpEivmp6CTP8T18RMF
"""

# STEP 1: Install dependencies (run these in your terminal, not in the script)
# pip install openai
# For macOS: brew install --cask mactex (or install BasicTeX)
# For Linux: sudo apt-get install texlive-xetex -y

# STEP 2: Import Libraries
import openai
from datetime import datetime
from pathlib import Path
import subprocess
import os
import sys

# STEP 3: Add your API key
# Option 1: Use environment variable (RECOMMENDED for security)
# export OPENAI_API_KEY="your-api-key-here"
openai_api_key = os.getenv('OPENAI_API_KEY')

# Option 2: Fallback - prompt user for API key if not in environment
if not openai_api_key:
    print("üîë OpenAI API key not found in environment variables.")
    openai_api_key = input("Please enter your OpenAI API key: ").strip()
    
    if not openai_api_key:
        print("‚ùå Error: No API key provided!")
        print("Please either:")
        print("1. Set environment variable: export OPENAI_API_KEY='your-key'")
        print("2. Enter your API key when prompted")
        sys.exit(1)

# STEP 4: Ask the user guided questions
print("Please answer the following questions:")

company_name = input("1. What is the name of your company? ")
industry = input("2. What industry does your company operate in? ")
region = input("3. What geographic region does your company serve? ")
ownership = input("4. What is your ownership type? (e.g., standalone, subsidiary, private) ")

revenue_data = input("5. Provide revenue, EBITDA, and net profit for the past 3 years (e.g., in CSV format or sentence). ")
customer_profile = input("6. Who are your typical customers? (e.g., B2B, B2C, demographics) ")
product_description = input("7. What products or services does your company offer? ")

competitor_names = input("8. List a few competitors: ").split(',')
preferred_comparison_method = input("9. Do you prefer a specific valuation method (DCF, Market Multiple, etc.)? Leave blank to let AI decide: ")

# STEP 5: Generate LaTeX content using OpenAI
from openai import OpenAI # Import the OpenAI class

# Initialize the client
client = OpenAI(api_key=openai_api_key)


prompt = f"""
You are a professional valuation analyst. Write a formal, detailed LaTeX business valuation report based on the following:

Company: {company_name}
Industry: {industry}
Region: {region}
Ownership: {ownership}

Revenue Data:
{revenue_data}

Customer Profile:
{customer_profile}

Product Description:
{product_description}

Competitors: {', '.join(competitor_names)}
Preferred Method: {preferred_comparison_method or 'Choose based on best fit'}

Include these sections:
1. Executive Summary
2. Ownership Context
3. Financial Overview (with charts or table formatting in LaTeX if possible)
4. Valuation Models Used (DCF, Market Multiples, etc.)
5. Competitor Benchmarking (with basic ratio estimates)
6. Final Valuation Estimate (range + rationale)
7. Strategic Recommendations

Format everything in valid LaTeX starting from \\documentclass to \\end{{document}}.
"""

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "user", "content": prompt}
    ],
    temperature=0.5,
    max_tokens=3500
)

latex_code = response.choices[0].message.content.strip()

import re
from pathlib import Path

# üîç DEBUG: See first 1000 chars of LaTeX
print("Generated LaTeX content preview:")
print(latex_code[:1000])
print("\n" + "="*50 + "\n")

# Extract company name from LaTeX title line
match = re.search(r'\\title\{Business Valuation Report:\s*([A-Za-z0-9 &\-_]+)\}', latex_code)
if match:
    company_name_clean = match.group(1).strip().replace(" ", "_")
else:
    company_name_clean = "valuation_report"
    print("‚ö†Ô∏è Company name not found, using default filename.")

print(f"üìù Company name extracted: {company_name_clean}")

# Create output directory if it doesn't exist
output_dir = Path.cwd() / "valuation_reports"
output_dir.mkdir(exist_ok=True)

# Save LaTeX file with extracted company name
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
filename = f"Valuation_{company_name_clean}_{timestamp}"
tex_path = output_dir / f"{filename}.tex"
tex_path.write_text(latex_code, encoding='utf-8')
print(f"‚úÖ LaTeX saved as: {tex_path}")

# Change to output directory for LaTeX compilation
original_cwd = Path.cwd()
os.chdir(output_dir)

try:
    # Compile LaTeX to PDF with better error handling
    print("üîÑ Compiling LaTeX to PDF...")
    result = subprocess.run(
        ["xelatex", "-interaction=nonstopmode", f"{filename}.tex"],
        capture_output=True,
        text=True,
        timeout=60  # 60 second timeout
    )
    
    if result.returncode == 0:
        pdf_path = output_dir / f"{filename}.pdf"
        if pdf_path.exists():
            print(f"‚úÖ PDF successfully generated: {pdf_path}")
            print(f"üìÅ PDF location: {pdf_path.absolute()}")
            
            # Open the PDF automatically (macOS)
            try:
                subprocess.run(["open", str(pdf_path)], check=False)
                print("üìñ Opening PDF...")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not auto-open PDF: {e}")
                
        else:
            print("‚ùå PDF file was not created despite successful compilation")
    else:
        print(f"‚ùå LaTeX compilation failed with return code: {result.returncode}")
        print(f"Error output: {result.stderr}")
        
        # Try pdflatex as fallback
        print("üîÑ Trying pdflatex as fallback...")
        result_fallback = subprocess.run(
            ["pdflatex", "-interaction=nonstopmode", f"{filename}.tex"],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result_fallback.returncode == 0:
            pdf_path = output_dir / f"{filename}.pdf"
            if pdf_path.exists():
                print(f"‚úÖ PDF successfully generated with pdflatex: {pdf_path}")
                print(f"üìÅ PDF location: {pdf_path.absolute()}")
                
                # Open the PDF automatically (macOS)
                try:
                    subprocess.run(["open", str(pdf_path)], check=False)
                    print("üìñ Opening PDF...")
                except Exception as e:
                    print(f"‚ö†Ô∏è Could not auto-open PDF: {e}")
            else:
                print("‚ùå PDF file was not created with pdflatex either")
        else:
            print(f"‚ùå pdflatex also failed with return code: {result_fallback.returncode}")
            print(f"Error output: {result_fallback.stderr}")

except subprocess.TimeoutExpired:
    print("‚ùå LaTeX compilation timed out")
except FileNotFoundError:
    print("‚ùå LaTeX compiler not found. Please install LaTeX:")
    print("   macOS: brew install --cask mactex")
    print("   Linux: sudo apt-get install texlive-xetex")
except Exception as e:
    print(f"‚ùå An error occurred during compilation: {e}")
finally:
    # Return to original directory
    os.chdir(original_cwd)

print(f"\nüéØ Summary:")
print(f"   LaTeX file: {tex_path}")
print(f"   PDF should be at: {output_dir / f'{filename}.pdf'}")
print(f"   Output directory: {output_dir.absolute()}")

